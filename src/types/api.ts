/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Root
         * @description API 루트 엔드포인트.
         */
        get: operations["read_root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Items
         * @description 모든 아이템 목록을 반환합니다.
         */
        get: operations["read_items_items__get"];
        put?: never;
        /**
         * Create Item
         * @description 새 아이템을 생성합니다.
         */
        post: operations["create_item_items__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Item
         * @description 특정 ID를 가진 아이템을 반환합니다.
         */
        get: operations["read_item_items__item_id__get"];
        /**
         * Update Item
         * @description 특정 ID를 가진 아이템을 업데이트합니다.
         */
        put: operations["update_item_items__item_id__put"];
        post?: never;
        /**
         * Delete Item
         * @description 특정 ID를 가진 아이템을 삭제합니다.
         */
        delete: operations["delete_item_items__item_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 시스템 상태 확인
         * @description 시스템의 전반적인 상태를 확인합니다.
         *
         *     다음 정보를 반환합니다:
         *     - status: 서비스 상태 (ok, degraded, error)
         *     - uptime: 서비스 실행 시간(초)
         *     - timestamp: 현재 시간
         *     - version: API 버전
         */
        get: operations["health_check_health__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health/db": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 데이터베이스 연결 상태 확인
         * @description MongoDB 데이터베이스 연결 상태를 확인합니다.
         *
         *     다음 정보를 반환합니다:
         *     - status: 데이터베이스 연결 상태 (ok, error)
         *     - latency: 데이터베이스 응답 시간(ms)
         *     - details: 추가 정보
         */
        get: operations["db_health_check_health_db_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health/system": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 시스템 리소스 상태 확인
         * @description 시스템 리소스 사용 현황을 확인합니다.
         *
         *     다음 정보를 반환합니다:
         *     - cpu: CPU 사용률(%)
         *     - memory: 메모리 사용 정보
         *     - disk: 디스크 사용 정보
         *     - system: 시스템 정보
         */
        get: operations["system_health_check_health_system_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/todos/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 모든 Todo 항목 조회
         * @description Todo 항목 목록을 조회합니다.
         *
         *     다음과 같은 필터링 및 페이징 옵션을 제공합니다:
         *     - completed: 완료 여부에 따른 필터링
         *     - skip: 건너뛸 항목 수
         *     - limit: 최대 반환 항목 수
         */
        get: operations["read_todos_todos__get"];
        put?: never;
        /**
         * 새 Todo 항목 생성
         * @description 새로운 Todo 항목을 생성합니다.
         *
         *     반환값은 생성된 Todo 항목의 상세 정보입니다.
         */
        post: operations["create_todo_todos__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/todos/{todo_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 특정 Todo 항목 조회
         * @description 특정 ID의 Todo 항목을 조회합니다.
         */
        get: operations["read_todo_todos__todo_id__get"];
        /**
         * Todo 항목 수정
         * @description 특정 ID의 Todo 항목을 수정합니다.
         *
         *     요청 본문에 포함된 필드만 업데이트됩니다.
         *     반환값은 수정된 Todo 항목의 상세 정보입니다.
         */
        put: operations["update_todo_todos__todo_id__put"];
        post?: never;
        /**
         * Todo 항목 삭제
         * @description 특정 ID의 Todo 항목을 삭제합니다.
         *
         *     성공적으로 삭제되면 204 No Content 응답을 반환합니다.
         */
        delete: operations["delete_todo_todos__todo_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/todos/{todo_id}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Todo 항목에 새 Task 추가
         * @description 특정 Todo 항목에 새 Task를 추가합니다.
         *
         *     반환값은 업데이트된 Todo 항목의 상세 정보입니다.
         */
        post: operations["add_task_todos__todo_id__tasks_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/todos/{todo_id}/tasks/{task_index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Todo 항목의 특정 Task 수정
         * @description 특정 Todo 항목의 특정 Task를 수정합니다.
         *
         *     반환값은 업데이트된 Todo 항목의 상세 정보입니다.
         */
        put: operations["update_task_todos__todo_id__tasks__task_index__put"];
        post?: never;
        /**
         * Todo 항목의 특정 Task 삭제
         * @description 특정 Todo 항목의 특정 Task를 삭제합니다.
         *
         *     반환값은 업데이트된 Todo 항목의 상세 정보입니다.
         */
        delete: operations["delete_task_todos__todo_id__tasks__task_index__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/todos/{todo_id}/tasks/{task_index}/subtasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Task에 새 Subtask 추가
         * @description 특정 Todo 항목의 특정 Task에 새 Subtask를 추가합니다.
         *
         *     반환값은 업데이트된 Todo 항목의 상세 정보입니다.
         */
        post: operations["add_subtask_todos__todo_id__tasks__task_index__subtasks_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/todos/{todo_id}/tasks/{task_index}/subtasks/{subtask_index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Task의 특정 Subtask 수정
         * @description 특정 Todo 항목의 특정 Task의 특정 Subtask를 수정합니다.
         *
         *     반환값은 업데이트된 Todo 항목의 상세 정보입니다.
         */
        put: operations["update_subtask_todos__todo_id__tasks__task_index__subtasks__subtask_index__put"];
        post?: never;
        /**
         * Task의 특정 Subtask 삭제
         * @description 특정 Todo 항목의 특정 Task의 특정 Subtask를 삭제합니다.
         *
         *     반환값은 업데이트된 Todo 항목의 상세 정보입니다.
         */
        delete: operations["delete_subtask_todos__todo_id__tasks__task_index__subtasks__subtask_index__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register
         * @description 새 사용자를 등록합니다.
         *
         *     Args:
         *         user_data: 등록할 사용자 정보
         *
         *     Returns:
         *         등록된 사용자 정보
         *
         *     Raises:
         *         HTTPException: 등록 중 오류가 발생한 경우
         */
        post: operations["register_auth_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login
         * @description 사용자 로그인을 처리합니다.
         *
         *     Args:
         *         form_data: 로그인 폼 데이터 (username은 이메일로 처리)
         *
         *     Returns:
         *         액세스 토큰
         *
         *     Raises:
         *         HTTPException: 로그인에 실패한 경우
         */
        post: operations["login_auth_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Users Me
         * @description 현재 로그인한 사용자의 정보를 반환합니다.
         *
         *     Args:
         *         current_user: 현재 로그인한 사용자
         *
         *     Returns:
         *         현재 로그인한 사용자 정보
         */
        get: operations["read_users_me_auth_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Body_login_auth_login_post */
        Body_login_auth_login_post: {
            /** Grant Type */
            grant_type?: string | null;
            /** Username */
            username: string;
            /** Password */
            password: string;
            /**
             * Scope
             * @default
             */
            scope: string;
            /** Client Id */
            client_id?: string | null;
            /** Client Secret */
            client_secret?: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * ItemCreate
         * @description 아이템 생성을 위한 스키마입니다.
         * @example {
         *       "description": "새 아이템 설명",
         *       "name": "새 아이템",
         *       "price": 15000,
         *       "stock": 10
         *     }
         */
        ItemCreate: {
            /**
             * Name
             * @description 아이템 제목
             */
            name: string;
            /**
             * Description
             * @description 아이템 설명
             */
            description?: string | null;
            /**
             * Price
             * @description 아이템 가격
             */
            price: number;
            /**
             * Stock
             * @description 아이템 재고 수량
             * @default 0
             */
            stock: number;
        };
        /**
         * ItemResponse
         * @description API 응답으로 사용되는 아이템 스키마입니다.
         * @example {
         *       "_id": "507f1f77bcf86cd799439011",
         *       "description": "샘플 아이템 설명",
         *       "name": "샘플 아이템",
         *       "price": 10000,
         *       "stock": 5
         *     }
         */
        ItemResponse: {
            /**
             * Name
             * @description 아이템 제목
             */
            name: string;
            /**
             * Description
             * @description 아이템 설명
             */
            description?: string | null;
            /**
             * Price
             * @description 아이템 가격
             */
            price: number;
            /**
             * Stock
             * @description 아이템 재고 수량
             * @default 0
             */
            stock: number;
            /**
             * Id
             * @description 아이템 고유 ID
             */
            _id?: string | null;
        };
        /**
         * ItemUpdate
         * @description 아이템 업데이트를 위한 스키마입니다.
         * @example {
         *       "description": "수정된 설명",
         *       "name": "수정된 아이템",
         *       "price": 20000,
         *       "stock": 15
         *     }
         */
        ItemUpdate: {
            /**
             * Name
             * @description 업데이트할 아이템 제목
             */
            name?: string | null;
            /**
             * Description
             * @description 업데이트할 아이템 설명
             */
            description?: string | null;
            /**
             * Price
             * @description 업데이트할 아이템 가격
             */
            price?: number | null;
            /**
             * Stock
             * @description 업데이트할 아이템 재고 수량
             */
            stock?: number | null;
        };
        /**
         * SubtaskBase
         * @description Subtask 항목의 기본 스키마입니다.
         */
        SubtaskBase: {
            /**
             * Title
             * @description 서브태스크 제목
             */
            title: string;
            /**
             * Completed
             * @description 완료 여부
             * @default false
             */
            completed: boolean;
        };
        /**
         * SubtaskCreate
         * @description Subtask 항목 생성을 위한 스키마입니다.
         */
        SubtaskCreate: {
            /**
             * Title
             * @description 서브태스크 제목
             */
            title: string;
            /**
             * Completed
             * @description 완료 여부
             * @default false
             */
            completed: boolean;
        };
        /**
         * SubtaskUpdate
         * @description Subtask 항목 업데이트를 위한 스키마입니다.
         */
        SubtaskUpdate: {
            /**
             * Title
             * @description 서브태스크 제목
             */
            title?: string | null;
            /**
             * Completed
             * @description 완료 여부
             */
            completed?: boolean | null;
        };
        /**
         * TaskBase
         * @description Task 항목의 기본 스키마입니다.
         */
        TaskBase: {
            /**
             * Title
             * @description 태스크 제목
             */
            title: string;
            /**
             * Description
             * @description 태스크 상세 설명
             */
            description?: string | null;
            /**
             * Completed
             * @description 완료 여부
             * @default false
             */
            completed: boolean;
            /**
             * Subtasks
             * @description 서브태스크 목록
             */
            subtasks?: components["schemas"]["SubtaskBase"][];
        };
        /**
         * TaskCreate
         * @description Task 항목 생성을 위한 스키마입니다.
         */
        TaskCreate: {
            /**
             * Title
             * @description 태스크 제목
             */
            title: string;
            /**
             * Description
             * @description 태스크 상세 설명
             */
            description?: string | null;
            /**
             * Completed
             * @description 완료 여부
             * @default false
             */
            completed: boolean;
            /**
             * Subtasks
             * @description 서브태스크 목록
             */
            subtasks?: components["schemas"]["SubtaskBase"][];
        };
        /**
         * TaskUpdate
         * @description Task 항목 업데이트를 위한 스키마입니다.
         */
        TaskUpdate: {
            /**
             * Title
             * @description 태스크 제목
             */
            title?: string | null;
            /**
             * Description
             * @description 태스크 상세 설명
             */
            description?: string | null;
            /**
             * Completed
             * @description 완료 여부
             */
            completed?: boolean | null;
            /**
             * Subtasks
             * @description 서브태스크 목록
             */
            subtasks?: components["schemas"]["SubtaskBase"][] | null;
        };
        /**
         * TodoCreate
         * @description Todo 항목 생성을 위한 스키마입니다.
         */
        TodoCreate: {
            /**
             * Title
             * @description 할 일 제목
             */
            title: string;
            /**
             * Description
             * @description 할 일 상세 설명
             */
            description?: string | null;
            /**
             * Priority
             * @description 우선순위 (1-5)
             * @default 1
             */
            priority: number;
            /**
             * Tasks
             * @description 태스크 목록
             */
            tasks?: components["schemas"]["TaskBase"][];
            /**
             * Completed
             * @description 완료 여부
             * @default false
             */
            completed: boolean;
        };
        /**
         * TodoResponse
         * @description API 응답을 위한 Todo 항목 스키마입니다.
         */
        TodoResponse: {
            /**
             * Title
             * @description 할 일 제목
             */
            title: string;
            /**
             * Description
             * @description 할 일 상세 설명
             */
            description?: string | null;
            /**
             * Priority
             * @description 우선순위 (1-5)
             * @default 1
             */
            priority: number;
            /**
             * Tasks
             * @description 태스크 목록
             */
            tasks?: components["schemas"]["TaskBase"][];
            /** Id */
            _id?: string;
            /**
             * Completed
             * @description 완료 여부
             * @default false
             */
            completed: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /** Updated At */
            updated_at?: string | null;
        };
        /**
         * TodoUpdate
         * @description Todo 항목 업데이트를 위한 스키마입니다.
         */
        TodoUpdate: {
            /**
             * Title
             * @description 할 일 제목
             */
            title?: string | null;
            /**
             * Description
             * @description 할 일 상세 설명
             */
            description?: string | null;
            /**
             * Completed
             * @description 완료 여부
             */
            completed?: boolean | null;
            /**
             * Priority
             * @description 우선순위 (1-5)
             */
            priority?: number | null;
            /**
             * Tasks
             * @description 태스크 목록
             */
            tasks?: components["schemas"]["TaskBase"][] | null;
        };
        /**
         * Token
         * @description 토큰 모델.
         */
        Token: {
            /** Access Token */
            access_token: string;
            /**
             * Token Type
             * @default bearer
             */
            token_type: string;
        };
        /**
         * User
         * @description API 응답으로 사용되는 사용자 모델.
         * @example {
         *       "_id": "5f8a716b0e0a0e0a0e0a0e0a",
         *       "created_at": "2023-01-01T00:00:00",
         *       "email": "user@example.com",
         *       "is_active": true,
         *       "name": "John Doe",
         *       "role": "user",
         *       "updated_at": "2023-01-01T00:00:00"
         *     }
         */
        User: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Name */
            name: string;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /** @default user */
            role: components["schemas"]["UserRole"];
            /** Id */
            _id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * UserCreate
         * @description 사용자 생성 모델.
         */
        UserCreate: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Name */
            name: string;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /** @default user */
            role: components["schemas"]["UserRole"];
            /** Password */
            password: string;
        };
        /**
         * UserRole
         * @description 사용자 역할 열거형.
         * @enum {string}
         */
        UserRole: "admin" | "user";
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    read_root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    read_items_items__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_item_items__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_item_items__item_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_item_items__item_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_item_items__item_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    health_check_health__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description 서비스를 사용할 수 없음 */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    db_health_check_health_db_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description 서비스를 사용할 수 없음 */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    system_health_check_health_system_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description 서비스를 사용할 수 없음 */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    read_todos_todos__get: {
        parameters: {
            query?: {
                /** @description 건너뛸 항목 수 */
                skip?: number;
                /** @description 반환할 최대 항목 수 */
                limit?: number;
                /** @description 완료된 항목만 필터링 (true/false) */
                completed?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TodoResponse"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Todo not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_todo_todos__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TodoCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TodoResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Todo not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_todo_todos__todo_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                todo_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TodoResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Todo not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_todo_todos__todo_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                todo_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TodoUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TodoResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Todo not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_todo_todos__todo_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                todo_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Todo not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_task_todos__todo_id__tasks_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                todo_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TodoResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Todo not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_task_todos__todo_id__tasks__task_index__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                todo_id: string;
                task_index: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TodoResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Todo not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_task_todos__todo_id__tasks__task_index__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                todo_id: string;
                task_index: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TodoResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Todo not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_subtask_todos__todo_id__tasks__task_index__subtasks_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                todo_id: string;
                task_index: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubtaskCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TodoResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Todo not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_subtask_todos__todo_id__tasks__task_index__subtasks__subtask_index__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                todo_id: string;
                task_index: number;
                subtask_index: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubtaskUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TodoResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Todo not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_subtask_todos__todo_id__tasks__task_index__subtasks__subtask_index__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                todo_id: string;
                task_index: number;
                subtask_index: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TodoResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Todo not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    register_auth_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_auth_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_login_auth_login_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_users_me_auth_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
